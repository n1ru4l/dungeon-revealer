name: Build Binaries

on:
  push:
    tags:
      - "v*"

jobs:
  job_build_x64:
    name: ${{ matrix.os }} Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Compile x64 binary
        run: |
          npm install
          npm run build
          npm run compile

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: binaries
          path: bin/

  job_build_arm:
    name: ARM Linux Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build arm
        run: |
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --rm -v $(pwd):/usr/src/app/ arm32v7/node:12 /bin/sh -c 'cd /usr/src/app/; npm install; npm run compile:armv7'

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: binaries
          path: bin/

  job_upload:
    name: Upload Release Assets
    needs: [job_build_x64, job_build_arm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Github Actions is weird about environment variables.
      # Setting a variable in this way makes it available to all subsequent steps in the job.
      # The only way to get the tag is to extract it from github-ref.
      # For example, GITHUB_REF='refs/tags/v1.5'.
      - name: Set environment
        run: |
          export TAG="${GITHUB_REF#'refs/tags/'}"
          echo "::set-env name=GH_TAG::$TAG"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - uses: actions/download-artifact@v1
        with:
          name: binaries
          path: bin/

      - name: Prepare assets
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          chmod +x bin/dungeon-revealer-linux bin/dungeon-revealer-macos bin/dungeon-revealer-linux-armv7
          zip "dungeon-revealer-linux-$GH_TAG.zip" -j bin/dungeon-revealer-linux README.md
          zip "dungeon-revealer-linux-armv7-$GH_TAG.zip" -j bin/dungeon-revealer-linux-armv7 README.md
          zip "dungeon-revealer-macos-$GH_TAG.zip" -j bin/dungeon-revealer-macos README.md
          zip "dungeon-revealer-win-$GH_TAG.zip" -j bin/dungeon-revealer-win.exe README.md

      # We have to upload assets individually using upload-release-asset@v1
      # There isn't a matrix for steps.
      - name: Upload Linux Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dungeon-revealer-linux-${{ env.GH_TAG }}.zip
          asset_name: dungeon-revealer-linux-${{ env.GH_TAG }}.zip
          asset_content_type: application/zip

      - name: Upload MacOS Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dungeon-revealer-macos-${{ env.GH_TAG }}.zip
          asset_name: dungeon-revealer-macos-${{ env.GH_TAG }}.zip
          asset_content_type: application/zip

      - name: Upload Windows Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dungeon-revealer-win-${{ env.GH_TAG }}.zip
          asset_name: dungeon-revealer-win-${{ env.GH_TAG }}.zip
          asset_content_type: application/zip

      - name: Upload Linux ARM Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dungeon-revealer-linux-armv7-${{ env.GH_TAG }}.zip
          asset_name: dungeon-revealer-linux-armv7-${{ env.GH_TAG }}.zip
          asset_content_type: application/zip
